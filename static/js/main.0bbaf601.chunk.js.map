{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenres","_ref2","genres","react_default","a","createElement","MoviePoster","_ref3","poster","src","alt","Movie","_ref","title","synopsis","className","map","y","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_callApi","fetch","then","b","json","c","data","movies","catch","err","console","log","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_this","sent","setState","stop","_renderMovies","x","src_Movie","medium_cover_image","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA+CA,SAASA,EAATC,GAA8B,IAARC,EAAQD,EAARC,OAClB,OACIC,EAAAC,EAAAC,cAAA,YAAOH,GAqCf,SAASI,EAATC,GAA8B,IAARC,EAAQD,EAARC,OAClB,OACIL,EAAAC,EAAAC,cAAA,OAAKI,IAAKD,EAAQE,IAAI,iBAyBfC,MA9Ff,SAAAC,GAAiD,IAAjCC,EAAiCD,EAAjCC,MAAOL,EAA0BI,EAA1BJ,OAAQN,EAAkBU,EAAlBV,OAAQY,EAAUF,EAAVE,SACnC,OACIX,EAAAC,EAAAC,cAAA,OAAKU,UAAU,QACXZ,EAAAC,EAAAC,cAACC,EAAD,CAAaE,OAAQA,IACrBL,EAAAC,EAAAC,cAAA,UAAKQ,GACLV,EAAAC,EAAAC,cAAA,SACCH,EAAOc,IAAI,SAACC,EAAEC,GAAH,OAAWf,EAAAC,EAAAC,cAACL,EAAD,CAAaE,OAAQe,EAAGE,IAAKD,OAQpDf,EAAAC,EAAAC,cAAA,SAEIF,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CACAiB,KAAMP,EACNQ,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,eC4CTC,6MAxEbC,MAAQ,KAcRC,SAAW,WACT,OAAOC,MAAM,iEACZC,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SACZF,KAAK,SAAAG,GAAC,OAAIA,EAAEC,KAAKC,SACjBC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAG5BG,gCAAa,SAAAC,IAAA,IAAAN,EAAA,OAAAO,EAAAtC,EAAAuC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,EAAKnB,WADf,OACLO,EADKS,EAAAI,KAEXD,EAAKE,SAAS,CACZd,WAHS,wBAAAS,EAAAM,SAAAT,QAgBfU,cAAe,WASb,OAReJ,EAAKpB,MAAMQ,OAAOnB,IAAI,SAACoC,EAAElC,GACtC,OAAOf,EAAAC,EAAAC,cAACgD,EAAD,CACPxC,MAAOuC,EAAEvC,MACTL,OAAQ4C,EAAEE,mBACVnC,IAAKD,EACLhB,OAAQkD,EAAElD,OACVY,SAAUsC,EAAEtC,iGAbbyC,KAAKf,8CAqBJ,OACErC,EAAAC,EAAAC,cAAA,OAAKU,UAAY,OAIbwC,KAAK5B,MAAMQ,OAASoB,KAAKJ,gBAAkB,wBA3DnCK,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.0bbaf601.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\n\r\n/* \r\nclass Movie extends Component...\r\n클래스형 컴포넌트\r\n장점 : state를 쓸 수 있음\r\n단점 : 코드가 복잡해짐\r\n\r\nfunction Movie({porops1, props2...})\r\n함수형 컴포넌트 (dumb component)\r\n단지 어떤 값을 return 해서 출력해주기만을 위한 컴포넌트\r\n장점 : 코드가 단순함\r\n단점 : state가 없음\r\n*/\r\n\r\n\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return(\r\n        <div className=\"card\">\r\n            <MoviePoster poster={poster}/>\r\n            <h1>{title}</h1>\r\n            <p>\r\n            {genres.map((y,index)=><MovieGenres genres={y} key={index}/>)}\r\n            {/* \r\n            <MovieGenres genres={sf} key={0}/>\r\n            <MovieGenres genres={drama} key={1}/>\r\n            <MovieGenres genres={comic} key={2}/>\r\n            <MovieGenres genres={romantic} key={3}/>\r\n            */}\r\n            </p>\r\n            <p>\r\n                {/* lineEllipsis 외부의 컴포넌트를 연결 */}\r\n                <LinesEllipsis\r\n                text={synopsis}\r\n                maxLine='2'\r\n                ellipsis='...'\r\n                trimRight\r\n                basedOn='letters'\r\n                />   \r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MovieGenres({genres}){\r\n    return(\r\n        <span>{genres}</span>\r\n    )\r\n}\r\n    \r\n\r\n\r\n/* \r\nclass Movie extends Component{\r\n\r\n    static propTypes = {\r\n        title : PropTypes.string.isRequired,\r\n        poster : PropTypes.string.isRequired\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>    \r\n                <MoviePoster poster={this.props.poster}/>\r\n                <h1>{this.props.title}</h1>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n */\r\n\r\n\r\n/* \r\ncomponent\r\n- props : 부모로부터 받아오는 값(읽기 전용)\r\n- state : 각각의 컴포넌트가 가지는 객체\r\n          state에 변경사항이 있을 때 마다 componenet가 새로 랜더링 된다.\r\n*/\r\n\r\n\r\n\r\nfunction MoviePoster({poster}){\r\n    return(\r\n        <img src={poster} alt=\"Movie Poster\"/>\r\n    )\r\n}\r\n\r\n\r\n\r\n/* class MoviePoster extends Component{\r\n    static propTypes = {\r\n        poster : PropTypes.string.isRequired\r\n    }\r\n\r\n    render(){\r\n        return <img src={this.props.poster}/>;\r\n    }\r\n} */\r\n\r\nMovie.propTypes={\r\n    title:PropTypes.string.isRequired,\r\n    poster:PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes={\r\n    poster:PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, { Component } from \"react\";\nimport './App.css';\nimport Movie from './Movie';\n\n\n\n\n\n\n\nclass App extends Component{\n\n  state = {}\n\n  /* \n    async, await\n    fetch로 받아온 데이터와 그걸 처리하는 then들을 더욱 간결하고 명료하게 만들어주는 도구\n    fetch와 then을 사용해서 일일이 모든 동작을 지정해주지 않고, fetch가 끝난 다음 바로 실행시킬 것들을 지정할 수 있게 만드는 tool\n\n    asynce:이전라인의 작업이 끝날때까지 기다리지 않고 실행 될 작업\n\n    await : 해당 기능이 끝나는 것을 기다리고, 바로 실행. asynce가 실행 되고 await 실행 됨.\n\n    fetch(주소).then(a => a.json()).then(b=>b.....).then(...).then(...)\n\n  */\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')//fetch() 자바스크립트로 외부의 url을 가져옴\n    .then(b => b.json())//json으로 바꿈\n    .then(c => c.data.movies)\n    .catch(err => console.log(err));//에러가 났을 때 catch\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    })\n  }\n\n  //5초 뒤에 새로운 영화가 추가 되기\n componentDidMount(){\n   \n   this._getMovies()\n\n    \n} \n\n// _renderMovies =()=>{}  이름을 가진 화살표 함수\n_renderMovies =()=>{\n  const movies = this.state.movies.map((x,index)=>{\n    return <Movie \n    title={x.title} \n    poster={x.medium_cover_image} \n    key={index} \n    genres={x.genres}\n    synopsis={x.synopsis}/>\n  });\n  return movies;\n}\n\n\n  render(){\n\n    return(\n      <div className = \"App\">\n        {\n          //this.state.movies가 있을 땐 render\n          //state가 비어있는 상황일 땐 loading... 문구\n          this.state.movies ? this._renderMovies() : 'Loading . . .'\n          /* \n          if(this.state.movie){\n            this._renderMovies()\n          }else{\n            Loading...\n          }\n          */\n        }\n      </div>\n    );\n  }//render\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}